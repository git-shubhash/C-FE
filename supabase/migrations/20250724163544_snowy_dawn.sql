-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create update timestamp function
CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Users table (for patient records)
CREATE TABLE IF NOT EXISTS public.users (
  mrno UUID NOT NULL DEFAULT uuid_generate_v4(),
  name VARCHAR(255) NOT NULL,
  phone VARCHAR(20),
  email VARCHAR(255),
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  CONSTRAINT users_pkey PRIMARY KEY (mrno)
);

-- Appointments table
CREATE TABLE IF NOT EXISTS public.appointments (
  appointment_id UUID NOT NULL DEFAULT uuid_generate_v4(),
  mrno UUID NULL,
  date DATE NOT NULL,
  time TIME WITHOUT TIME ZONE NOT NULL,
  patient_name VARCHAR(255) NOT NULL,
  patient_phone VARCHAR(20),
  symptoms_brief TEXT NULL,
  doctor_id INTEGER NULL,
  doctor_name VARCHAR(255),
  status VARCHAR NULL DEFAULT 'pending',
  prescription_file_path TEXT NULL,
  prescription_signature JSONB NULL,
  prescription_signed BOOLEAN NULL DEFAULT FALSE,
  prescription_signed_at TIMESTAMPTZ NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NULL DEFAULT now(),
  CONSTRAINT appointments_pkey PRIMARY KEY (appointment_id),
  CONSTRAINT appointments_mrno_fkey FOREIGN KEY (mrno) REFERENCES users (mrno)
);

-- Medicines table
CREATE TABLE IF NOT EXISTS public.medicines (
  id SERIAL NOT NULL,
  name TEXT NOT NULL,
  price NUMERIC(10, 2) NOT NULL DEFAULT 0.00,
  quantity INTEGER NOT NULL DEFAULT 0,
  stock_status VARCHAR(20) NOT NULL DEFAULT 'in_stock',
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  CONSTRAINT medicines_pkey PRIMARY KEY (id)
);

-- Prescriptions table
CREATE TABLE IF NOT EXISTS public.prescriptions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  appointment_id UUID NOT NULL,
  medication_name TEXT NOT NULL,
  dosage TEXT NULL,
  frequency TEXT NULL,
  duration TEXT NULL,
  notes TEXT NULL,
  dispense_status BOOLEAN NOT NULL DEFAULT FALSE,
  CONSTRAINT prescriptions_pkey PRIMARY KEY (id),
  CONSTRAINT prescriptions_appointment_id_fkey FOREIGN KEY (appointment_id) REFERENCES appointments (appointment_id) ON DELETE CASCADE
);

-- Bills table
CREATE TABLE IF NOT EXISTS public.bills (
  bill_id UUID NOT NULL DEFAULT uuid_generate_v4(),
  appointment_id UUID NOT NULL,
  medication_name TEXT NOT NULL,
  quantity INTEGER NOT NULL,
  unit_price NUMERIC(10, 2) NOT NULL,
  total_price NUMERIC(10, 2) GENERATED ALWAYS AS (quantity * unit_price) STORED,
  payment_mode VARCHAR(20) NOT NULL CHECK (payment_mode IN ('cash', 'online')),
  transaction_id TEXT NULL,
  payment_status VARCHAR(20) NOT NULL DEFAULT 'completed',
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  CONSTRAINT bills_pkey PRIMARY KEY (bill_id),
  CONSTRAINT bills_appointment_id_fkey FOREIGN KEY (appointment_id) REFERENCES appointments (appointment_id) ON DELETE CASCADE
);

-- Create triggers
DROP TRIGGER IF EXISTS update_appointments_timestamp ON appointments;
CREATE TRIGGER update_appointments_timestamp 
BEFORE UPDATE ON appointments 
FOR EACH ROW 
EXECUTE FUNCTION update_timestamp();

DROP TRIGGER IF EXISTS update_medicines_timestamp ON medicines;
CREATE TRIGGER update_medicines_timestamp 
BEFORE UPDATE ON medicines 
FOR EACH ROW 
EXECUTE FUNCTION update_timestamp();

-- Function to auto-update stock status
CREATE OR REPLACE FUNCTION update_stock_status()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.quantity <= 10 THEN
    NEW.stock_status := 'low_stock';
  ELSE
    NEW.stock_status := 'in_stock';
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trg_update_stock_status ON medicines;
CREATE TRIGGER trg_update_stock_status
BEFORE INSERT OR UPDATE ON medicines
FOR EACH ROW EXECUTE FUNCTION update_stock_status();

-- Insert sample data
INSERT INTO users (name, phone, email) VALUES 
('John Doe', '+1234567890', 'john@example.com'),
('Jane Smith', '+1234567891', 'jane@example.com'),
('Bob Johnson', '+1234567892', 'bob@example.com')
ON CONFLICT DO NOTHING;

INSERT INTO appointments (patient_name, patient_phone, date, time, doctor_name, symptoms_brief) VALUES 
('John Doe', '+1234567890', '2024-01-15', '10:00:00', 'Dr. Smith', 'Fever and headache'),
('Jane Smith', '+1234567891', '2024-01-14', '14:30:00', 'Dr. Johnson', 'Stomach pain'),
('Bob Johnson', '+1234567892', '2024-01-13', '09:15:00', 'Dr. Williams', 'Cough and cold')
ON CONFLICT DO NOTHING;

INSERT INTO medicines (name, price, quantity) VALUES 
('Paracetamol', 5.00, 150),
('Amoxicillin', 12.50, 25),
('Ibuprofen', 8.00, 0),
('Aspirin', 3.50, 200),
('Omeprazole', 15.00, 75),
('Cetirizine', 6.50, 120),
('Metformin', 18.00, 8),
('Lisinopril', 22.00, 45)
ON CONFLICT DO NOTHING;

-- Insert sample prescriptions
INSERT INTO prescriptions (appointment_id, medication_name, dosage, frequency, duration, notes) 
SELECT 
  a.appointment_id,
  'Paracetamol',
  '500mg',
  'Twice daily',
  '5 days',
  'Take after meals'
FROM appointments a 
WHERE a.patient_name = 'John Doe'
LIMIT 1
ON CONFLICT DO NOTHING;

INSERT INTO prescriptions (appointment_id, medication_name, dosage, frequency, duration, notes) 
SELECT 
  a.appointment_id,
  'Amoxicillin',
  '250mg',
  'Three times daily',
  '7 days',
  'Complete the course'
FROM appointments a 
WHERE a.patient_name = 'John Doe'
LIMIT 1
ON CONFLICT DO NOTHING;

INSERT INTO prescriptions (appointment_id, medication_name, dosage, frequency, duration, notes) 
SELECT 
  a.appointment_id,
  'Ibuprofen',
  '400mg',
  'As needed',
  '3 days',
  'For pain relief'
FROM appointments a 
WHERE a.patient_name = 'Jane Smith'
LIMIT 1
ON CONFLICT DO NOTHING;